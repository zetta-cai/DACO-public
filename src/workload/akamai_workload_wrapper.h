/*
 * AkamaiWorkloadWrapper: load Akamai's CDN traces (including workload and dataset files) generated by TRAGEN (thread safe).
 * 
 * By Siyuan Sheng (2024.06.27).
 */

#ifndef AKAMAI_WORKLOAD_WRAPPER_H
#define AKAMAI_WORKLOAD_WRAPPER_H

#include <string>
#include <unordered_map>
#include <vector>

#include "workload/workload_item.h"
#include "workload/workload_wrapper_base.h"

namespace covered
{
    class AkamaiWorkloadWrapper : public WorkloadWrapperBase
    {
    public:
        AkamaiWorkloadWrapper(const uint32_t& clientcnt, const uint32_t& client_idx, const uint32_t& keycnt, const uint32_t& perclient_opcnt, const uint32_t& perclient_workercnt, const std::string& workload_name, const std::string& workload_usage_role, const std::string& workload_pattern_name, const uint32_t& dynamic_change_period, const uint32_t& dynamic_change_keycnt, const uint32_t& workload_randombase);
        virtual ~AkamaiWorkloadWrapper();

        virtual WorkloadItem generateWorkloadItem(const uint32_t& local_client_worker_idx) override; // NOTE: randomly select an item without modifying any variable -> thread safe
        virtual uint32_t getPracticalKeycnt() const override;
        virtual WorkloadItem getDatasetItem(const uint32_t itemidx) override; // Get a dataset key-value pair item with the index of itemidx

        // Get average/min/max dataset key/value size
        virtual double getAvgDatasetKeysize() const override;
        virtual double getAvgDatasetValuesize() const override;
        virtual uint32_t getMinDatasetKeysize() const override;
        virtual uint32_t getMinDatasetValuesize() const override;
        virtual uint32_t getMaxDatasetKeysize() const override;
        virtual uint32_t getMaxDatasetValuesize() const override;

        // For warmup speedup
        virtual void quickDatasetGet(const Key& key, Value& value) const override;
        virtual void quickDatasetPut(const Key& key, const Value& value) override;
        virtual void quickDatasetDel(const Key& key) override;
    private:
        static const std::string kClassName;
        static const uint32_t TRAGEN_VALSIZE_UNIT; // Value size unit in TRAGEN (NOTE: the unit of object sizes in Akamai's traces is KiB instead of bytes)

        virtual void initWorkloadParameters_() override;
        virtual void overwriteWorkloadParameters_() override;
        virtual void createWorkloadGenerator_() override;

        // Utility functions for dynamic workload patterns
        virtual uint32_t getLargestRank_(const uint32_t local_client_worker_idx) override;
        virtual void getRankedKeys_(const uint32_t local_client_worker_idx, const uint32_t start_rank, const uint32_t ranked_keycnt, std::vector<std::string>& ranked_keys) override;
        virtual void getRandomKeys_(const uint32_t local_client_worker_idx, const uint32_t random_keycnt, std::vector<std::string>& random_keys) override;

        // (1) Akamai-specific helper functions

        // For role of clients, dataset loader, and cloud
        void loadDatasetFile_(); // Load dataset file (objid-valsize pairs for dataset objects); clients use value sizes to generate workload items (yet not used due to GET requests)
        std::string getDatasetFilepath_() const;

        // For role of clients
        void loadWorkloadFile_(const uint32_t& local_client_worker_index);
        std::string getWorkloadFilepath_(const uint32_t& local_client_worker_index) const;

        // Common utilities
        void checkPointers_() const;
        Key getKeyFromObjid_(const int64_t& objid) const; // Generate Key based on 8-byte object ID
        int64_t getObjidFromKey_(const Key& key) const; // Get 8-byte object ID based on the given Key

        // (2) Statistics variables
        
        // For role of clients, dataset loader, and cloud
        double average_dataset_keysize_; // Average dataset key size
        double average_dataset_valuesize_; // Average dataset value size
        uint32_t min_dataset_keysize_; // Minimum dataset key size
        uint32_t min_dataset_valuesize_; // Minimum dataset value size
        uint32_t max_dataset_keysize_; // Maximum dataset key size
        uint32_t max_dataset_valuesize_; // Maximum dataset value size

        // (3) Const shared variables
        std::string instance_name_;

        // (4) Other shared variables
        // For role of clients, dataset loader, and cloud
        // NOTE: NO need to track object IDs, which range from 0 to keycnt-1
        std::vector<uint32_t> dataset_valsizes_; // Value sizes of dataset objects (indexed by object ID); client needs dataset_valsizes_ to generate workload items (although NOT used by client workers due to GET requests)
        // For role of clients during evaluation
        std::vector<std::vector<int64_t>> curclient_perworker_workload_objids_; // Object IDs of workload sequence for each client worker in the current client
        std::vector<uint32_t> curclient_perworker_workloadidx_; // To-be-accessed workload index for each client worker in the current client
        std::vector<std::vector<int64_t>> curclient_perworker_ranked_objids_; // Ranked object IDs for each client worker in the current client (used for dynamic workload patterns)
        std::vector<std::mt19937_64*> curclient_perworker_dynamic_randgen_ptrs_; // Random generators to get random keys from ranked object IDs (used for dynamic workload patterns)
        std::vector<std::uniform_int_distribution<uint32_t>*> curclient_perworker_dynamic_dist_ptrs_; // Uniform distributions to get random keys from ranked object IDs (used for dynamic workload patterns)
    };
}

#endif