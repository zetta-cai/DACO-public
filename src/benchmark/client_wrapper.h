/*
 * ClientWrapper: the socket-based client to issue local requests and receive responses by multiple threads (thread safe).
 *
 * Note: requests are generated by an underlying workload (e.g., CacheBench), while each client worker just converts generated requests into network packets to test remote cache.
 * 
 * NOTE: ClientWrapper relies on edge settings in Param to calculate closest edge network address and send requests.
 * 
 * By Siyuan Sheng (2023.04.17).
 */

#ifndef CLIENT_WRAPPER_H
#define CLIENT_WRAPPER_H

#include <string>

namespace covered
{
    class ClientWrapperParam;
    class ClientWrapper;
}

#include "benchmark/client_worker_param.h"
#include "cli/client_cli.h"
#include "common/node_wrapper_base.h"
#include "network/propagation_simulator_param.h"
#include "statistics/client_statistics_tracker.h"
#include "workload/workload_wrapper_base.h"

namespace covered
{
    class ClientWrapperParam
    {
    public:
        ClientWrapperParam();
        ClientWrapperParam(const uint32_t& client_idx, ClientCLI* client_cli_ptr);
        ~ClientWrapperParam();

        uint32_t getClientIdx() const;
        ClientCLI* getClientCLIPtr() const;

        ClientWrapperParam& operator=(const ClientWrapperParam& other);
    private:
        uint32_t client_idx_;
        ClientCLI* client_cli_ptr_;
    };
    
    class ClientWrapper : public NodeWrapperBase
    {
    public:
        static void* launchClient(void* client_wrapper_param_ptr);

        ClientWrapper(const uint64_t& capacity_bytes, const uint32_t& client_idx, const uint32_t& clientcnt, const bool& is_warmup_speedup, const uint32_t& edgecnt, const uint32_t& keycnt, const uint32_t& perclient_opcnt, const uint32_t& perclient_workercnt, const uint32_t& propagation_latency_clientedge_us, const std::string& realnet_option, const uint32_t& warmup_reqcnt_scale, const std::string& workload_name, const float& zipf_alpha);
        virtual ~ClientWrapper();

        // (1) Const getters

        uint32_t getEdgeCnt() const;
        uint32_t getKeycnt() const;
        bool isWarmupSpeedup() const;
        uint32_t getPerclientWorkercnt() const;
        std::string getRealnetOption() const;
        uint32_t getWarmupReqcntScale() const;
        bool isWarmupPhase() const;
        bool isMonitored() const;
        WorkloadWrapperBase* getWorkloadWrapperPtr() const;
        ClientStatisticsTracker* getClientStatisticsTrackerPtr() const;
        PropagationSimulatorParam* getClientToedgePropagationSimulatorParamPtr() const;
    private:
        static const std::string kClassName;

        // (2) Process benchmark control messages

        virtual void initialize_() override;
        virtual void processFinishrunRequest_(MessageBase* finishrun_request_ptr) override;
        virtual void processOtherBenchmarkControlRequest_(MessageBase* control_request_ptr) override;
        virtual void cleanup_() override;

        void processSwitchSlotRequest_(MessageBase* control_request_ptr);
        void processFinishWarmupRequest_(MessageBase* control_request_ptr);

        // (3) Other utility functions

        void finishWarmupPhase_();

        void checkPointers_() const;

        // Const shared variable
        const bool is_warmup_speedup_; // Come from CLI
        const uint64_t capacity_bytes_; // Come from CLI
        const uint32_t edgecnt_; // Come from CLI
        const uint32_t keycnt_; // Come from CLI
        const uint32_t perclient_workercnt_; // Come from CLI
        const std::string realnet_option_; // Come from CLI
        const uint32_t warmup_reqcnt_scale_; // Come from CLI

        // Const individual variable
        std::string instance_name_;

        // Non-const shared variables for warmup and stresstest phases
        std::atomic<bool> is_warmup_phase_;
        std::atomic<bool> is_monitored_;

        // Non-const shared variables
        WorkloadWrapperBase* workload_generator_ptr_; // thread safe
        ClientStatisticsTracker* client_statistics_tracker_ptr_; // thread safe
        PropagationSimulatorParam* client_toedge_propagation_simulator_param_ptr_; // thread safe

        // Non-const individual
        ClientWorkerParam* client_worker_params_;

        // Sub-threads
        pthread_t client_toedge_propagation_simulator_thread_;
        pthread_t* client_worker_threads_;
    };
}

#endif