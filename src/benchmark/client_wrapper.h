/*
 * ClientWrapper: the socket-based client to issue local requests and receive responses by multiple threads (thread safe).
 *
 * Note: requests are generated by an underlying workload (e.g., CacheBench), while each client worker just converts generated requests into network packets to test remote cache.
 * 
 * NOTE: ClientWrapper relies on edge settings in Param to calculate closest edge network address and send requests.
 * 
 * By Siyuan Sheng (2023.04.17).
 */

#ifndef CLIENT_WRAPPER_H
#define CLIENT_WRAPPER_H

#include <string>

#include "common/node_wrapper_base.h"
#include "network/propagation_simulator_param.h"
#include "statistics/client_statistics_tracker.h"
#include "workload/workload_wrapper_base.h"

namespace covered
{
    class ClientWrapper : public NodeWrapperBase
    {
    public:
        static void* launchClient(void* client_idx_ptr);

        ClientWrapper(const uint32_t& client_idx, const uint32_t& clientcnt, const uint32_t& edgecnt, const uint32_t& keycnt, const uint32_t& opcnt, const uint32_t& perclient_workercnt, const uint32_t& propagation_latency_clientedge_us, const std::string& workload_name);
        virtual ~ClientWrapper();

        friend class ClientWorkerWrapper;
    private:
        static const std::string kClassName;

        virtual void initialize_() override;
        virtual void processFinishrunRequest_() override;
        virtual void processOtherBenchmarkControlRequest_(MessageBase* control_request_ptr) override;
        virtual void cleanup_() override;

        void processSwitchSlotRequest_(MessageBase* control_request_ptr);
        void processWarmupRequest_();

        bool isWarmupPhase_() const;
        void finishWarmupPhase_();

        void checkPointers_() const;

        // Const shared variable
        const uint32_t edgecnt_;
        const uint32_t perclient_workercnt_;

        // Const individual variable
        std::string instance_name_;

        // Non-const shared variables for warmup and stresstest phases
        std::atomic<bool> is_warmup_phase_;

        // Non-const shared variables
        WorkloadWrapperBase* workload_generator_ptr_; // thread safe
        ClientStatisticsTracker* client_statistics_tracker_ptr_; // thread safe
        PropagationSimulatorParam* client_toedge_propagation_simulator_param_ptr_; // thread safe

        // Sub-threads
        pthread_t client_toedge_propagation_simulator_thread_;
        pthread_t* client_worker_threads_;
    };
}

#endif