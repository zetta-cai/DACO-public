/*
 * ClientWorkerWrapper: a worker thread launched by client to issue local requests and receive responses.
 *
 * NOTE: client worker will convert generated workload items (generated by an underlying workload, e.g., CacheBench) into local requests to test remote cache.
 * 
 * By Siyuan Sheng (2023.04.20).
 */

#ifndef CLENT_WORKER_WRAPPER_H
#define CLENT_WORKER_WRAPPER_H

//#define DEBUG_CLIENT_WORKER_WRAPPER

#include <string>

#include "benchmark/client_worker_param.h"
#include "message/message_base.h"
#include "network/udp_msg_socket_server.h"

namespace covered
{
    class ClientWorkerWrapper
    {
    public:
        static void* launchClientWorker(void* client_worker_param_ptr);
        
        ClientWorkerWrapper(ClientWorkerParam* client_worker_param_ptr);
        ~ClientWorkerWrapper();

        void start();
    private:
        static const std::string kClassName;

        bool issueItemToEdge_(const WorkloadItem& workload_item, DynamicArray& local_response_msg_payload, uint32_t& rtt_us, const bool& is_warmup_phase, const bool& is_warmup_speedup, const bool& is_monitored, const uint64_t& cur_msg_seqnum); // Return is_finish
        void processLocalResponse_(const WorkloadItem& workload_item, const DynamicArray& local_response_msg_payload, const uint32_t& rtt_us, const bool& is_stresstest_phase);

        void checkPointers_() const;

        std::string instance_name_;

        ClientWorkerParam* client_worker_param_ptr_;

        // (1) For sending local requests
        uint32_t closest_edge_idx_; // Debug information if with timeout
        NetworkAddr closest_edge_cache_server_recvreq_dst_addr_; // Used by client worker to send local requests

        // (2) For receiveing local responses
        NetworkAddr client_worker_recvrsp_source_addr_; // Used by cache server workers to send back local responses (const individual variable)
        UdpMsgSocketServer* client_worker_recvrsp_socket_server_ptr_; // Used by client worker to receive local responses from cache server workers (non-const individual variable)

        // (3) For per-client-worker warmup reqcnt limitation
        uint32_t cur_warmup_reqcnt_;
        uint32_t warmup_reqcnt_limit_;
    };
}

#endif