/*
 * ClientWorkerWrapper: a worker thread launched by client to issue local requests and receive responses.
 *
 * Note that the items are generated by an underlying workload (e.g., CacheBench).
 *   -> We use Util::KVPAIR_GENERATION_SEED as deterministic seed to generate the same key-value pairs (i.e., dataset) for all clients.
 *   -> We use client index as deterministic seed to generate different items (i.e., workloads) for all clients, yet with the same items for all workers of a specific client.
 *   -> We use global worker index as deterministic seed to choose the same items for all running times of a specific worker.
 * The worker will convert generated items into local requests to test remote cache.
 * 
 * By Siyuan Sheng (2023.04.20).
 */

#ifndef CLENT_WORKER_WRAPPER_H
#define CLENT_WORKER_WRAPPER_H

#define DEBUG_CLIENT_WORKER_WRAPPER

#include <random> // std::mt19937_64
#include <string>

#include "benchmark/client_worker_param.h"
#include "message/message_base.h"
#include "network/udp_msg_socket_server.h"

namespace covered
{
    class ClientWorkerWrapper
    {
    public:
        static void* launchClientWorker(void* client_worker_param_ptr);

        ClientWorkerWrapper(ClientWorkerParam* client_worker_param_ptr);
        ~ClientWorkerWrapper();

        void start();
    private:
        static const std::string kClassName;

        bool issueItemToEdge_(const WorkloadItem& workload_item, DynamicArray& local_response_msg_payload, uint32_t& rtt_us); // Return is_finish
        void processLocalResponse_(const DynamicArray& local_response_msg_payload, const uint32_t& rtt_us);

        void checkPointers_() const;

        std::string instance_name_;

        ClientWorkerParam* client_worker_param_ptr_;
        std::mt19937_64* client_worker_item_randgen_ptr_;

        // For sending local requests
        uint32_t global_client_worker_idx_;
        NetworkAddr closest_edge_cache_server_recvreq_dst_addr_; // Used by client worker to send local requests

        // For receiveing local responses
        NetworkAddr client_worker_recvrsp_source_addr_; // Used by cache server workers to send back local responses (const individual variable)
        UdpMsgSocketServer* client_worker_recvrsp_socket_server_ptr_; // Used by client worker to receive local responses from cache server workers (non-const individual variable)
    };
}

#endif