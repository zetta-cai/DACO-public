/*
 * WorkerWrapper: a worker thread launched by client to issue requests and receive responses.
 *
 * Note that the items are generated by an underlying workload (e.g., CacheBench).
 *   -> We use Util::KVPAIR_GENERATION_SEED to generate the same key-value pairs (i.e., dataset) for all clients.
 *   -> We use global client index as seed to generate the same items (i.e., workload) for all workers of a specific client.
 *   -> We use global worker index as seed to choose the same items for all running times of a specific worker.
 * The worker will convert generated items into local requests to test remote cache.
 * 
 * By Siyuan Sheng (2023.04.20).
 */

#ifndef WORKER_WRAPPER_H
#define WORKER_WRAPPER_H

#include <random> // std::mt19937_64
#include <string>

#include "benchmark/worker_param.h"
#include "network/udp_socket_wrapper.h"

namespace covered
{
    class WorkerWrapper
    {
    public:
        static void* launchWorker(void* local_worker_param_ptr);

        WorkerWrapper(WorkerParam* local_worker_param_ptr);
        ~WorkerWrapper();

        void start();
    private:
        static const std::string kClassName;

        WorkerParam* local_worker_param_ptr_;
        std::mt19937_64* local_worker_item_randgen_ptr_;
        UdpSocketWrapper* local_worker_sendreq_toedge_socket_client_ptr_;
    };
}

#endif